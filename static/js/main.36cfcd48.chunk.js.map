{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","color","setColor","choice","setChoice","result","setResult","_colors","shuffleColors","rngIdx","Math","floor","random","length","checkAnswer","className","onKeyDown","e","key","console","log","tabIndex","map","idx","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gLAAAA,EAAOC,QAAU,IAA0B,kC,oHCyE5BC,MApEf,WAAgB,IAAD,EACaC,mBAAS,QADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAKPC,EAAU,CAAC,MAAO,OAAQ,SAAU,SA4BpCC,EAAgB,WACpB,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQM,QAChDX,EAASK,EAAQE,KAObK,EAAc,WAEhBR,EADEH,IAAWF,EACH,UAEA,cAId,OACE,yBAAKc,UAAU,MAAMC,UA5CD,SAACC,GACrB,OAAQA,EAAEC,KACR,IAAK,IACHV,IACA,MACF,IAAK,IACHJ,EAAUG,EAAQ,IAClBO,IACA,MACF,IAAK,IACHV,EAAUG,EAAQ,IAClBO,IACA,MACF,IAAK,IACHV,EAAUG,EAAQ,IAClBO,IACA,MACF,IAAK,IACHV,EAAUG,EAAQ,IAClBO,IACA,MACF,QACEK,QAAQC,IAAI,aAsB+BC,SAAS,KACtD,uCAAapB,GACb,6BACA,uCAfKM,EAAQe,IAAI,SAACrB,EAAOsB,GAAR,OAAgB,yBAAKL,IAAKjB,GAAQsB,EAAM,EAAxB,KAA6BtB,MAkB9D,6BACA,sCACE,6BAAME,IAER,sCACE,6BAAME,MCvDMmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.36cfcd48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [color, setColor] = useState(\"blue\");\n  const [choice, setChoice] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const _colors = [\"red\", \"blue\", \"yellow\", \"green\"]\n\n  const handleKeyDown = (e) => {\n    switch (e.key) {\n      case \" \":\n        shuffleColors()\n        break;\n      case \"1\":\n        setChoice(_colors[0])\n        checkAnswer()\n        break;\n      case \"2\":\n        setChoice(_colors[1])\n        checkAnswer()\n        break;\n      case \"3\":\n        setChoice(_colors[2])\n        checkAnswer()\n        break;\n      case \"4\":\n        setChoice(_colors[3])\n        checkAnswer()\n        break;\n      default:\n        console.log('Default')\n    }\n  }\n\n  const shuffleColors = () => {\n    let rngIdx = Math.floor(Math.random() * _colors.length)\n    setColor(_colors[rngIdx])\n  }\n\n  const answerButtons = () => {\n    return _colors.map((color, idx) => <div key={color}>{idx + 1}. {color}</div>)\n  }\n\n  const checkAnswer = () => {\n    if (choice === color) {\n      setResult(\"Correct\")\n    } else {\n      setResult(\"Incorrect\")\n    }\n  }\n\n  return (\n    <div className=\"App\" onKeyDown={handleKeyDown} tabIndex=\"1\">\n      <div>Color: {color}</div>\n      <br />\n      <div>CHOICES\n        {answerButtons()}\n      </div>\n      <br />\n      <div>CHOICE\n        <div>{choice}</div>\n      </div>\n      <div>RESULT\n        <div>{result}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}